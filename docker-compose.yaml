version: "3.8"
services:
  web:

    image: ghcr.io/fadidab98/alhakim-web:latest
    pull_policy: always
    command: gunicorn --bind 0.0.0.0:8000 core.wsgi:application
    volumes:
      - ./staticfiles:/app/staticfiles
    ports:
      - "6090:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    depends_on:
      - db
  db:
    image: postgres:13
    pull_policy: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=alhakim_db
      - POSTGRES_USER=alhakim_user
      - POSTGRES_PASSWORD=alhakim_pass
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alhakim_user -d alhakim_db"]
      interval: 5s
      timeout: 5s
      retries: 5
  backup:
    image: postgres:13
    volumes:
      - ./db_backups:/backups
    environment:
      - MAX_BACKUPS=5
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: |
      bash -c '
        set -e
        echo "Starting backup process at $(date)" >> /backups/backup.log
        i=1
        while [ "$i" -le 30 ]; do
          pg_isready -h db -U alhakim_user -d alhakim_db -p 5432 >> /backups/backup.log 2>&1
          if [ $? -eq 0 ]; then
            echo "Database is ready at $(date)" >> /backups/backup.log
            break
          fi
          echo "Waiting for database to be ready... Attempt $i/30" >> /backups/backup.log
          sleep 2
          i=$((i + 1))
          if [ "$i" -eq 31 ]; then
            echo "Error: Database not ready after 60 seconds" >> /backups/backup.log
            exit 1
          fi
        done
        COUNTER=0
        while [ "$COUNTER" -lt "${MAX_BACKUPS}" ]; do
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "Creating backup at $TIMESTAMP" >> /backups/backup.log
          PGPASSWORD=alhakim_pass pg_dump -h db -U alhakim_user -d alhakim_db -p 5432 --verbose > /backups/backup_${TIMESTAMP}.sql 2>> /backups/backup.log
          if [ $? -eq 0 ]; then
            echo "Backup succeeded: backup_${TIMESTAMP}.sql" >> /backups/backup.log
          else
            echo "Backup failed for $TIMESTAMP" >> /backups/backup.log
          fi
          COUNTER=$((COUNTER + 1))
          echo "Backup $COUNTER of ${MAX_BACKUPS} completed" >> /backups/backup.log
          ls -tp /backups/backup_*.sql | tail -n +11 | xargs -I {} rm -- {} || true
          if [ "$COUNTER" -lt "${MAX_BACKUPS}" ]; then
            sleep 300
          fi
        done
        echo "Backup process completed: Maximum backups reached at $(date)" >> /backups/backup.log
      '

volumes:
  postgres_data: